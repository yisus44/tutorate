annotation.processing.enabled=true
annotation.processing.enabled.in.editor=false
annotation.processing.processors.list=
annotation.processing.run.all.processors=true
annotation.processing.source.output=${build.generated.sources.dir}/ap-source-output
application.desc=La aplicaci\u00f3n de escritorio Tutorate implementa una soluci\u00f3n en Java, MVC, POO y MySQL para un sistema de tutor\u00edas en donde los alumnos seleccionan a maestros que se especializan en una o varias \u00e1reas de conocimiento. \nEl objetivo de la aplicaci\u00f3n consiste en auxiliar a combatir la crisis educativa que ha sucedido durante la pandemia mundial del COVID-19 en diversos niveles educativos en Latinoam\u00e9rica en la que muchos alumnos que o sufrieron una reducci\u00f3n importante en la calidad de su educaci\u00f3n o directamente perdieron el acceso a ella, mientras que muchos docentes perdieron su trabajo consecuencia de la crisis econ\u00f3mica.\n Los usuarios de esta aplicaci\u00f3n se esperan que vengan principalmente de dos grupos que hayan aceptado los t\u00e9rminos y condiciones: alumnos (ya sean que vengan de instituciones formales u sean autodidactas) con inter\u00e9s en una o varias \u00e1reas de conocimiento y con conocimientos b\u00e1sicos de computaci\u00f3n y docentes(ya sean titulados, estudiantes universitarios o de bachillerato o incluso personas autodidactas) con talento, conocimiento, disponibilidad de tiempo y posibilidad de desplazarse para realizar las sesiones.\nTutorate cuenta con las funciones para: registrarse como alumno o maestro, iniciar sesi\u00f3n, consultar todos los maestros, a\u00f1adir y eliminar un maestro como tutor, actualizar informaci\u00f3n de contacto, consultar los maestros disponibles y darse de baja de la aplicaci\u00f3n.\nEl acceso a la aplicaci\u00f3n Tutorate necesitar\u00e1 de un registro en el que se dar\u00e1 informaci\u00f3n como el nombre, edad, email, contrase\u00f1a y posteriormente un inicio de sesi\u00f3n que requerir\u00e1 correo electr\u00f3nico y contrase\u00f1a. Los maestros podr\u00e1n ver solo que alumnos se han interesado por ellos y podr\u00e1n contactarlos mientras que los alumnos podr\u00e1n tener acceso a seguir y contactar a cualquier maestro.\nLa principal fuente de ingreso ser\u00e1 por la colocaci\u00f3n de anuncios, puesto que se contempla que no se cobre por impartir o recibir sesiones ya sea como alumno o maestro.
application.title=Tutorate
application.vendor=Jesus, Jorge y Sarahi
build.classes.dir=${build.dir}/classes
build.classes.excludes=**/*.java,**/*.form
# This directory is removed when the project is cleaned:
build.dir=build
build.generated.dir=${build.dir}/generated
build.generated.sources.dir=${build.dir}/generated-sources
# Only compile against the classpath explicitly listed here:
build.sysclasspath=ignore
build.test.classes.dir=${build.dir}/test/classes
build.test.results.dir=${build.dir}/test/results
# Uncomment to specify the preferred debugger connection transport:
#debug.transport=dt_socket
debug.classpath=\
    ${run.classpath}
debug.modulepath=\
    ${run.modulepath}
debug.test.classpath=\
    ${run.test.classpath}
debug.test.modulepath=\
    ${run.test.modulepath}
# Files in build.classes.dir which should be excluded from distribution jar
dist.archive.excludes=
# This directory is removed when the project is cleaned:
dist.dir=dist
dist.jar=${dist.dir}/Tutorate.jar
dist.javadoc.dir=${dist.dir}/javadoc
dist.jlink.dir=${dist.dir}/jlink
dist.jlink.output=${dist.jlink.dir}/Tutorate
endorsed.classpath=
excludes=
file.reference.mysql-connector-java.jar=/home/luis/NetBeansProjects/Conector_Java_Mysql/mysql-connector-java.jar
includes=**
jar.compress=false
javac.classpath=\
    ${file.reference.mysql-connector-java.jar}
# Space-separated list of extra javac options
javac.compilerargs=
javac.deprecation=false
javac.external.vm=true
javac.modulepath=
javac.processormodulepath=
javac.processorpath=\
    ${javac.classpath}
javac.source=13
javac.target=13
javac.test.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
javac.test.modulepath=\
    ${javac.modulepath}
javac.test.processorpath=\
    ${javac.test.classpath}
javadoc.additionalparam=
javadoc.author=false
javadoc.encoding=${source.encoding}
javadoc.html5=false
javadoc.noindex=false
javadoc.nonavbar=false
javadoc.notree=false
javadoc.private=false
javadoc.splitindex=true
javadoc.use=true
javadoc.version=false
javadoc.windowtitle=
# The jlink additional root modules to resolve
jlink.additionalmodules=
# The jlink additional command line parameters
jlink.additionalparam=
jlink.launcher=true
jlink.launcher.name=Tutorate
main.class=
manifest.file=manifest.mf
meta.inf.dir=${src.dir}/META-INF
mkdist.disabled=false
platform.active=default_platform
run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
# Space-separated list of JVM arguments used when running the project.
# You may also define separate properties like run-sys-prop.name=value instead of -Dname=value.
# To set system properties for unit tests define test-sys-prop.name=value:
run.jvmargs=
run.modulepath=\
    ${javac.modulepath}
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}
run.test.modulepath=\
    ${javac.test.modulepath}
source.encoding=UTF-8
src.dir=src
test.src.dir=test
